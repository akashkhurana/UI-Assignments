Assignment-1
Exercises: Basic

1. function parityCheck(n){
    if(n%2 == 0){
        return "even";
    }
    else{
        return "odd";
    }
}


console.log("The number is "+ parityCheck(15));
 
2.  
function greatestNumber(a,b,c){
  greatest = a;
  if (b > greatest){
      greatest = b;
  }
  if (c > greatest){
      greatest = c;
  }
  return greatest;
}


console.log("The greatest number is "+ greatestNumber(5,9,8));




3. function flipCoin(n){
    head=0;
    tail=0;
    for(i = 0 ; i < n; i++){
        x=Math.floor(Math.random()*2);
        if(x){
            head++;
        }
        else{
            tail++;
        }
    }
    return (head);
}


console.log(flipCoin(10));


4.  
function flipCoin(n){
    head=0;
    tail=0;
    for(i = 0 ; i < n; i++){
        x=Math.floor(Math.random()*2);
        if(x){
            head++;
        }
        else{
            tail++;
        }
    }
    return head/n;
}


console.log(flipCoin(100));








5. function concat(n, str){
    res=""
    for(i=0; i<n; i++){
        res+=str;
    }
    return res;
}


console.log(concat(7,"sw"));
 
6.  
function getSix(){
    x=Math.ceil(Math.random()*6);
    count=1;
    while(x!=6){
        x=Math.ceil(Math.random()*6); 
        count++;
    }
    return count;
}


console.log(getSix());


7.  
x = Math.floor(Math.random()*2);
if(x==1){
    document.getElementsByTagName("h1")[0].innerHTML = "Have a GOOD day!";
}
else{
    document.getElementsByTagName("h1")[0].innerHTML = "Have a BAD day!";
}










Exercises: Basic JS
1.  
var fourNums = [];
for(i=0; i<4; i++){
    x = Math.random();
    fourNums[i]=x;
}


document.write(fourNums);
console.log(fourNums);
 
2.  
var hundredNums = [];
for(i=0; i<100; i++){
    x = Math.random();
    hundredNums[i]=x;
}


document.write(hundredNums);
console.log(hundredNums);


3.  
var strings = ["1.3", "3.5", "6.8"];
function numberArray(strings){
    for(i = 0; i < strings.length; i++){
        strings[i] = parseInt(strings[i]);
    }
    return strings;
}


var nums = numberArray(strings);


document.write(strings);
console.log(strings);
 






4.  
string = "ababcdababefgababhiabsdftreyetye";
function longestToken(string){
    n=string.length;
    arr = new Array(n).fill(0);
    for(i=0;i<n; i++){
        if (string[i]!="a" && string[i]!="b"){
            arr.forEach(function(part, index) {
                arr[i] = 1;
            });     
        }
    }
    longest=0;
    count = 0;
        for(i=0; i<n; i++){
            if(arr[i]==0){
                count= 0;
            }
            else{
                count++;
                longest= Math.max(longest, count);
            }
    }
    return longest;
}


console.log(longestToken(string));
document.write(longestToken(string));






5.  
var test1 = ["stop", "quit", "exit"];


function lengthOfNonQWords(arr){
    return arr.filter(item => item.indexOf("q")==-1).reduce(function (result, item) {
        return result + item.length;
      }, 0);
}












Exercise with 30 Questions:


1.  
alert("Hello World");


2. var name = prompt("What's your name?");
alert("Hello " + name);
3.  
var name = prompt("What's your name?");
if (name=="Alice" || name=="Bob"){
    alert("Hello " + name);
}


4.  
n = prompt("Enter a number");
n=parseInt(n);
if (n%3==0){
    sum = n*(n+1)/2;
}


alert(sum);
 


5.  
n = prompt("Enter a number");
n=parseInt(n);
sum=0;
for(i=1; i<n+1; i++){
    if(i%3==0 || i%5==0){
        sum+=i;
    }
}
document.write(sum);


6.  
n = prompt("Enter a number");
m= prompt("Enter 0 to add numbers OR enter 1 for the product");
n=parseInt(n);
m=parseInt(m);
sum=0;
product=1;


function addition(n){
    for(i=1; i<n+1; i++){
            sum+=i;
    }
    return sum;
}
function multiplication(n){
    for(i=1; i<n+1; i++){
            product*=i;
    }
    return product;
}


if (m==1){
    console.log(multiplication(n));
}




if (m==0){
    console.log(addition(n));    
}


7. const number = parseInt(prompt('Enter an integer: '));
for(i = 1; i <= 10; i++) {
    const result = i * number;
    console.log(`${number} * ${i} = ${result}`);
}
 
8.  
for (i = 2; i <= 9007199254740991; i++) {
    flag = 0;
    for (j = 2; j < i; j++) {
        if (i % j == 0) {
            flag = 1;
            break;
        }
    }
    if (i > 1 && flag == 0) {
        console.log(i);
    }
}






9. secret = Math.ceil(Math.random()*100);;
console.log(secret);
count=0;
flag = 0;
while(flag == 0){
    guess=parseInt(prompt("Guess the Secret number"));
    count++;
    if(guess == secret){
        flag=1;
    }
    else if(guess < secret){
        alert("Your guess is smaller")
    }
    else if(guess > secret){
        alert("Your guess is larger")
    }
}


console.log("You win!. \n The number was " + secret + "  and the tries needed were " + count);
 
10.  
year = 2021;
n = 20;
count = 0 ;
while(count!=n){
    year+=1;
    if ((year%400 == 0) || ((year%4 == 0) && (year%100!=0))){
        count+=1;
        console.log(year);
    }
}
 
11. function largestElement(list){
    n = list.length;
    largest = 0;
    for(i=0; i<n; i++){
        largest = Math.max(largest, list[i]); 
    }
    return largest;
}


list=[12, 13, 56, 99, 58, 65, 11, 120]
console.log(largestElement(list));


  
12.  
function reverseList(list){
    n=list.length;
    for(i=0; i<n/2; i++){
        t = list[i];
        list[i] = list[n-i-1];
        list[n-i-1] = t;
    }
    return list; 
}
list=[12, 13, 56, 99, 58, 65, 11, 120];
console.log(reverseList(list));
 


13.  


function occursInList(list, p){
    n=list.length;
    flag = false;
    for(i=0; i<n; i++){
        if (list[i] == p){
            flag=true;
            break;
        }
    }
    return flag;
}
list=[12, 13, 56, 99, 58, 65, 11, 120];
p=120;
console.log(occursInList(list,p));
 


14.  


function elementInOdd(list){
    var arr= [];
    n=list.length;
    for(i=0; i<n; i+=2){
        arr.push(list[i]);
    }
    return arr;
}


list=[12, 13, 56, 99, 58, 65, 11, 120];
console.log(elementInOdd(list));
 
15.  


function totalOfList(list){
    n=list.length;
    total=0;
    for(i=0; i<n; i++){
        total+=list[i];
    }
    return total;
}


list=[12, 13, 56, 99, 58, 65, 11, 120];
console.log(totalOfList(list));
 
16.  


function isPalindrome(str){
    n = str.length;
    if (n < 2){
        return true;
    }
    else if (str[0] == str[n - 1]){
        return isPalindrome(str.slice(1,n-1));
    }
    else{
        return false;
    }
}


str = "aaaabbbbaaaa"
console.log(isPalindrome(str));
 
17.  
function sumOfList(list){
    n=list.length;
    total=0;
    for(i=0; i<n; i++){
        total+=list[i];
    }
    return total;
}
 
list=[12, 13, 56, 99, 58, 65, 11, 120];
console.log(sumOfList(list));


function sumOfList(list){
    n=list.length;
    total=0;
    i=0;
    while(i<n){
        total+=list[i];
        i++;
    }
    return total;
}
 
list=[12, 13, 56, 99, 58, 65, 11, 120];
console.log(sumOfList(list));




function sum(array) {
    return (array.length === 0) ? 0 : array[0] + sum(array.slice(1));
}
 
array = [12, 13, 56, 99, 58, 65, 11, 120];
console.log(sum(array));
18.  
function square(i){
    console.log(i**2);
}


function on_all(array) {
    n=array.length;
    for(i=0; i<n; i++){
        square(array[i]);
    }
}
 
array = Array.from({length: 20}, (_, i) => i + 1);
on_all(array);


19.  
 
function concat(arr1, arr2){
    var res = [];
    a1 = arr1.length;
    a2 = arr2.length;
    for(i=0; i<a1; i++){
        res.push(arr1[i]);
        }
    for(i=0; i<a2; i++){
        res.push(arr2[i]);
    }
    return res;
}
 
arr1 = ["a", "b", "c"];
arr2 = [1, 2, 3];
console.log(concat(arr1, arr2));


20. function concat(arr1, arr2){
    res = [];
    for(i=0; i<(arr1.length+arr2.length);i++){
        if(i % 2 === 0){
            res.push(arr1[i/2]);
        }else{
            res.push(arr2[(i-1)/2]);
        }
    }
    return res;
}
 
arr1 = ["a", "b", "c"];
arr2 = [1, 2, 3];
console.log(concat(arr1, arr2));
 




21.  
function mergeSorted(arr1, arr2){
    var res = [];
    a1 = arr1.length;
    a2 = arr2.length;
    i=0;
    j=0;
    k=0;
    while(i<a1 && j<a2){
        if (arr1[i] < arr2[j]){ 
            res[k] = arr1[i];
            k = k+1;
            i = i+1;
        }
        else{
            res[k] = arr2[j];
            k = k+1;
            j = j+1;
        }
    }


    while (i < a1){
        res[k] = arr1[i];
        k = k+1;
        i = i+1;
    }


    while (j < a2){
        res[k] = arr2[j];
        k = k + 1
        j = j + 1
    }
    return res;
}
 
arr1 = [1, 4, 6];
arr2 = [2, 3, 5];
console.log(mergeSorted(arr1, arr2));


  
22.  
function rotateList(arr, k){
    res = arr.slice(k, arr.length).concat(arr.slice(0, k));
    return res;
}
arr = [1, 2, 3, 4, 5, 6];
k=2;
console.log(rotateList(arr,k));


23.  
function fibonacci(n){
    a=0;
    b=1;
    for (i=1; i<=n; i++) {
        console.log(a);
        c = a + b;
        a = b;
        b = c;
    }
}


n=100;
fibonacci(n);








24.  
function numberToList(n){
    var arr =  Array.from(String(n), Number);
    return arr;
}


n=1046340;
console.log(numberToList(n));




25.  
function addNumbersInList(arr1, arr2, n, m){
    res = [];
    i = n - 1;
    j = m - 1; 
    k = n - 1;
    c = 0;
    s = 0;
    while (j >= 0) {
        s = arr1[i] + arr2[j] + c;
        res[k] = (s % 10);
        c = Math.floor(s / 10);
        i--;
        j--;
        k--;
    }
    while (i >= 0) {
        s = arr1[i] + c;
        sum[k] = (s % 10);
        c = Math.floor(s / 10);
        i--;
        k--;
    }
    return res;
}


arr1 = [1,2,1,9];
arr2 = [2,3,9,9];
n= arr1.length;
m= arr2.length;
if (n >= m){
    console.log(addNumbersInList(arr1, arr2, n, m));
}
else{
    console.log(Sum(arr1, arr2, n, m));
}


 
function subtractNumbersInList(arr1, arr2, n, m){
    res = [];
    a= 0;
    for(i=0; i<n; i++){
        a+=((10**(n-i-1))*arr1[i]);
    }
    b=0;
    for(i=0; i<m; i++){
        b+=((10**(m-i-1))*arr2[i]);
    }
    if (a>=b){
        var arr =  Array.from(String(a-b), Number);
        return arr;
    }
    else{
        var arr =  Array.from(String(b-a), Number);
        return arr;
    }
}


arr1 = [4,2,1,9];
arr2 = [9,3,9,9];
n= arr1.length;
m= arr2.length;
console.log(subtractNumbersInList(arr1, arr2, n, m));




function multiplyNumbersInList(arr1, arr2, n, m){
    a= 0;
    for(i=0; i<n; i++){
        a+=((10**(n-i-1))*arr1[i]);
    }
    b=0;
    for(i=0; i<m; i++){
        b+=((10**(m-i-1))*arr2[i]);
    }
    var arr =  Array.from(String(a*b), Number);
    return arr;
}


arr1 = [4,0,0,0];
arr2 = [2, 0, 0];
n= arr1.length;
m= arr2.length;
console.log(multiplyNumbersInList(arr1, arr2, n, m));






26.  
function baseConversion(arr, b1, b2){
    n=arr.length;
    s="";
    for(i=0; i<n; i++){
        s+=arr[i];
    }
    res =  parseInt(s, b1).toString(b2);
    return Array.from(String(res), Number)
}


arr=[1,1,0,1];
b1=10;
b2=11;
console.log(baseConversion(arr,b1,b2));


















27.  
Various Sorting Algorithms


Selection Sort
function selectionSort(arr, n){
    for(i=0; i<n-1; i++){
        min = i;
        for(j=i+1; j<n; j++){
            if(arr[j]<arr[min]){
                min = j;
            }
        }
        temp = arr[i];
        arr[i] = arr[min];
        arr[min] = temp;
    }
}




Insertion Sort
function insertionSort(arr) {
    let n = arr.length;
        for (let i = 1; i < n; i++) {
            let curr = arr[i];
            let j = i; 
            while ((j > 0) && (arr[j-1] > curr)) {
                arr[j] = arr[j-1]
                j-=1;
            }
            arr[j] = curr;
        }
    return arr;
}


arr = [0, 2, 0, 0, 10, 4, 6, 7, 0, 9, 5, 9, 9, 4, 3, 1, 7, 0, 0, 4, 10, 7, 4, 6, 1, 5, 0, 3, 0, 6, 7, 8, 5, 7, 3, 4, 10, 9, 0, 1, 1, 7, 6, 4, 7, 0, 9, 8, 8, 10];
console.log(insertionSort(arr));




Merge Sort
function Merge(L,R,A){
    let nl = L.length;
    let nr = R.length;
    let i=0;
    let j=0;
    let k=0;
    while(i<nl && j<nr){
        if (L[i] <= R[j]){
            A[k] = L[i];
            i = i+1;
        }
        else{
            A[k] = R[j];
            j=j+1;
        }
        k= k+1;
    }
    while(i<nl){
        A[k] = L[i];
        i+=1;
        k+=1;
    }
    while(j<nr){
        A[k] = R[j];
        j+=1;
        k+=1;
    }


}


function MergeSort(arr){
    let n= arr.length;
    if(n<2){
        return arr;
    }
    else{
        let mid = Math.floor(n/2);
        let left = [];
        let right = [];
        for(i=0; i<mid; i++){
            left[i] = arr[i];
        }
        for(i=mid; i<n; i++){
            right[i-mid] = arr[i];
        }
        MergeSort(left);
        MergeSort(right);
        Merge(left,right,arr)
        return arr;
    }
}


arr = [1, 7, 8, 9, 4, 43,53 ,3554,232,54354,424];
console.log(MergeSort(arr));


Quick Sort
function QuickSort(A, start, end){
    if(start<end){
    let pivotIndex = Partition(A, start, end);
    QuickSort(A, start, pivotIndex-1);
    QuickSort(A, pivotIndex+1, end);
    }
}


function Partition(A, start, end){
    let pivot = A[end];
    let pivotIndex = start;
    for(let i=start; i<end; i++){
        if (A[i]<=pivot){
            [A[i], A[pivotIndex]] = [A[pivotIndex], A[i]];
            pivotIndex += 1;
        }
    }
    [A[pivotIndex], A[end]] = [A[end], A[pivotIndex]];
    return pivotIndex;
}
arr = [7, 2, 1, 6, 8, 5, 3, 4];
console.log(QuickSort(arr, 0, 8));
Stooge Sort
function stoogeSort(arr, i, j) {
    function stoogeSortRecurse(array, i, j) {
      if (array[j] < array[i]) {
        var aux = array[i];
        array[i] = array[j];
        array[j] = aux;
      }
  
      if (j - i > 1) {
        var t = Math.floor((j - i + 1) / 3);
        stoogeSortRecurse(array, i, j - t);
        stoogeSortRecurse(array, i + t, j);
        stoogeSortRecurse(array, i, j - t);
      }
    }
    stoogeSortRecurse(arr,i,j);
    return arr;
  }


arr = [0, 2, 10, 6, 9, 5, 3, 4, 7];
n=arr.length;
console.log(stoogeSort(arr,0,n-1));


28.  
Binary Search
function binarySearch(arr, x) {
    let start=0;
    let end=arr.length-1;
    while (start<=end){
        let mid=Math.floor((start + end)/2);
        if (arr[mid]<x) {
            start = mid+1
        }


        if (arr[mid]>x){
            end = mid - 1;
        }


        if(arr[mid]==x){
            return mid;
        }
    }
    return -1;
} 
    


arr = [1,2,3,4,5,6,7];
let x = 6;
console.log(binarySearch(arr, x));
 
29.  
function rectangularFrame(arr){
    size = arr.sort(
        function (a, b) {
            return b.length - a.length;
        }
    )[0].length;
    edge = "*".repeat(size+2);
    document.write(edge);
    document.write ("<br>");
    for(i=0;i<arr.length;i++){
        document.write("*"+arr[i]+"*");
        document.write ("<br>");
    }
}


arr=["feswf", "gwregw", "wgfwe"];
console.log(rectangularFrame(arr));
 
30.  
function pigLatin(arr){
    let n =arr.length;
    for(i=0; i<n; i++){
        let s = arr[i].slice(1)+arr[i][0]+"ay";
        arr[i]=s;
    }
    return arr;
}
arr=["the", "quick", "brown", "fox"];
console.log(pigLatin(arr));
1.  
2.  
function suggestLeap(int, frac){
  return Math.round(1.0/frac);
}
console.log(suggestLeap(1000, 5/700));


3.   
class Graph {
    constructor(){
        this.adjacencyList = {};
    }
    addVertex(vertex){
        if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];
    }


    addEdge(v1, v2)
    {
        this.adjacencyList[v1].push(v2);
        this.adjacencyList[v2].push(v1);    
    }
    removeVertex(vertex){
        while(this.adjacencyList[vertex].length){
            const adjacentVertex = this.adjacencyList[vertex].pop();
            this.removeEdge(vertex, adjacentVertex);
        }
        delete this.adjacencyList[vertex];
    }
    removeEdge(v1, v2)
    {
        this.adjacencyList[v1] = this.adjacencyList[v1].filter(v => v !== v2);
        this.adjacencyList[v2] = this.adjacencyList[v2].filter(v => v !== v1);
    }
}


let g = new Graph(6);
vertices = [ 'A', 'B', 'C', 'D', 'E', 'F'];
  


for (let i = 0; i < vertices.length; i++) {
    g.addVertex(vertices[i]);
}
  
g.addEdge('A', 'B');
g.addEdge('A', 'D');
g.addEdge('A', 'E');
g.addEdge('B', 'C');
g.addEdge('D', 'E');
g.addEdge('E', 'F');
g.addEdge('E', 'C');
g.addEdge('C', 'F');




4.   
5. 6.  
7. const morseCode = {
8.     "A": ".-",
9.     "B": "-...",
10.     "C": "-.-.",
11.     "D": "-..",
12.     "E": ".",
13.     "F": "..-.",
14.     "G": "--.",
15.     "H": "....",
16.     "I": "..",
17.     "J": ".---",
18.     "K": "-.-",
19.     "L": ".-..",
20.     "M": "--",
21.     "N": "-.",
22.     "O": "---",
23.     "P": ".--.",
24.     "Q": "--.-",
25.     "R": ".-.",
26.     "S": "...",
27.     "T": "-",
28.     "U": "..-",
29.     "W": ".--",
30.     "X": "-..-",
31.     "Y": "-.--",
32.     "Z": "--.."
33.  }
34.  const convertToMorse = (str) => {
35.     return str.toUpperCase().split("").map(el => {
36.        return morseCode[el] ? morseCode[el] : el;
37.     }).join("");
38.  };
39. 40.  console.log(convertToMorse('Disaster management'));
7.  
function isPalindrome(s) {
    var rev = s.split("").reverse().join("");
    return s == rev;
  }
  
  function longestPalind(s){
    var maxp_length = 0,
        maxp = '';
      
    for(var i=0; i < s.length; i++) {
      var subs = s.substr(i, s.length);
        
      for(var j=subs.length; j>=0; j--) {
        var sub_subs = subs.substr(0, j);
        if (sub_subs.length <= 1)
            continue;
          
        //console.log('checking: '+ sub_subs);
        if (isPalindrome(sub_subs)) {
          //console.log('palindrome: '+ sub_subs);
          if (sub_subs.length > maxp_length) {
              maxp_length = sub_subs.length;
              maxp = sub_subs;
          }
        }
      }
    }
    return maxp;
  }
  
  console.log(longestPalind("abcxyzyxabcdaaa"));
 
8.  
9.  
10.  
11.